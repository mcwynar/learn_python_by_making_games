-------------------------------------------------------------------

Display surface
This is the image that the player sees at the end of every game loop
Any other graphics(player, enemies, background, text) will be placed on this
There can only be a single display surface and any image not on it will not be shown


-------------------------------------------------------------------


The game loop
The entire logic of our game will run in a while True loop
Inside of it, we will check for any input, update all parts of the game and place graphics on the display surface
At the end of the loop, we will show the display surface


-------------------------------------------------------------------


Adding images
To show images, we need a surface
We have 2 surface types:
- display surface  --> The main canvas. There is only a single display surface. It will always be shown
- surface --> Basically an image. There can be unlimited surfaces. A surface will only be visible if it is on the display surface

Although they also share similar parts like the .fill method

Surfaces can be created in 3 ways:
1. Importing an image(png, jpeg)
2. Creating one in pygame
3. Creating text


-------------------------------------------------------------------


Placing a surface
Surfaces are placed in the display surface with the lit method(block image transfer)
display_surface.blit(surface, position)   -- position will be (x, y) / [x, y]
The position always places the top-left of the surface


-------------------------------------------------------------------


Color
Pygame has lots of inbuilt color options
You can also specify your own with rgb tuples -- (red, green, blue); value 0-255 for each color



-------------------------------------------------------------------


Blit places the top-left point of a surface
x++ --> moves right
y++ --> moves down


-------------------------------------------------------------------


Images
Images can be imported with pygame.image.load('path')
You should also convert the image for better performance


-------------------------------------------------------------------


Text
We first need a font object
This font object can render a string it returns a surface
This surface you can use like any other surface


-------------------------------------------------------------------


The speed of our game is determined by how fast the while loop runs

                                            Huge differences
Really slow cumputer  ------------------------------------------------------> Really fast computer

The game will run inconsistently on different systems
Since some scenes are harder to render than others, it might even run inconsistently on the same system!

One easy solution is to limit the maximum framerate
So that our game can never run faster than 60 frames per second


-------------------------------------------------------------------


Rectangles
Rectangles (or rects) solve a few problems
They make it easier (and more precise) to place surfaces
They are used for collisions
They can be used for drawing

Rectangles are used to place surfaces
Instead of specifying a position in blit you can specify a rect
That is giving you much more control


            topleft             midtop          topright

            midleft             center          midright

            bottomleft          midbottom       bottomright


Using rects with blit
display_surface.blit(surface, pos or rect)
You create a surface and a rect:
surface stores the image
rect stores position and movement
Only the rect moves!!


-------------------------------------------------------------------


Getting input
Support input devices: mouse, keyboard, touchscreen and controllers
You can either access the input in the event loop or via a separate methods outside of it
Most input are done via methods outside of the event loop
The input for the player should be inside the player class (this will make more sense later)


-------------------------------------------------------------------


Surfaces and rects

display surface
The main surface everything is drawn on
There can only be a single one


                        surface                                                                     rect
Individual images (for example, the ship or he background)                  Rectangles to use for placement and collisions
Can have unlimited numbers                                                  Can have unlimited numbers


Create a surface(text/image)    --> surf = pygame.image.load('path')
Create a rect from the surface  --> rect = surf.get_rect(rect_pos)
Change the rect    -->  rect.x += 10
Place surface using rect   --> display_surface.blit(surface, rect)


-------------------------------------------------------------------


Extra functionality for surfaces and rects

Rects can be used to draw shapes
pygame.draw.rect()
pygame.draw.ellipse()


Surfaces can be transformed (like scale or flip)
pygame.transform.scale()
pygame.transform.flip()


-------------------------------------------------------------------


Delta time
More on time and movement

The game runs at different speeds depending on the what computer it runs on

                                           Huge differences
Really slow cumputer  ------------------------------------------------------> Really fast computer

We need a way to account for the game running too fast and too slow!
Ideally, we don't want to limit the framerate because it leads to the game feeling worse

Delta time
Delta time measures how long it took to create one frame
For example, if the framerate is 60fps, delta time is 1s/60 = 0.0167
or about 17 milliseconds
This information we can use to keep the same at a constant speed regardless of framerate
We essentially multiply any movement with the delta time

How framerates influence the game
Speed(pixels per frame)        Frames per second       Delta time(seconds)      Original movement(per second)       Delta movement(per second)
 10                             30                      1/30 = 0.033             10*30 = 300                         10*30*0.033 = 10
 10                             60                      1/60 = 0.017             10*60 = 600                         10*60*0.017 = 10
 10                             120                     1/120 = 0.08             10*120 = 1200                       10*120*0.008 = 10

 Annoying problem with delta time
 When moving rects, we always place integers
 This cannot be changed because we need to place them in pixel positions
 But when moving with delta time we move via floating point numbers
 This implicit conversion leads to data loss and inconsistent speeds
 rect.left = 0     speed = 0.8
    rect.left += speed  -> resct.left += 0


-------------------------------------------------------------------


Time in pygame
Pygame can get the time since we started the game(or since pygame.init())
And we can create repeated timers


How to create a timer
We check the time twice

start time              current time
   200                      350

 If duration<current time - start time: timer is over

-------------------------------------------------------------------